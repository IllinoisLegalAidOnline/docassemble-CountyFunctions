include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
code: |
  ilao_easy_form_title = "CountyFunctions"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-CountyFunctions'
---
objects:
  - test_person: ALIndividual
  - another_person: ALIndividual
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
---
# interview order block
mandatory: True
code: |
  test_person.address.address
  test_person.address.county_correct_no_court
  another_person.address.address
  another_person.address.county_correct_no_court
  get_docs_screen
---
id: test person address
question: |
  Let's try out an address!
fields:
  - Street address: test_person.address.address
    address autocomplete: True
  - Address line 2: test_person.address.unit
    required: False
  - City: test_person.address.city
  - State: test_person.address.state
    code: |
      states_list() 
  - ZIP code: test_person.address.zip
  - County: test_person.address.county
---
id: another person address
question: |
  Let's try out another address!
fields:
  - Street address: another_person.address.address
    address autocomplete: True
  - Address line 2: another_person.address.unit
    required: False
  - City: another_person.address.city
  - State: another_person.address.state
    code: |
      states_list() 
  - ZIP code: another_person.address.zip
  - County: another_person.address.county
---
generic object: ALAddress
code: |  
  if is_illinois_county(x) == True:
    if county_in_list_no_court(x.county) == False:
      x.county_dropdown
      x.county = end_in_county(x.county_dropdown)
    else:
      x.county = end_in_county(x.county)
  else:
    x.county = end_in_county(x.county)
  x.county_correct_no_court = True
---
generic object: ALAddress
code: |  
  if is_illinois_county(x) == True:
    if county_in_list_with_court(x.county) == False:
      x.trial_court_index
      x.county = end_in_county(x.trial_court_index)
    else:
      x.county = end_in_county(x.county)
  else:
    x.county = end_in_county(x.county)
  x.county_correct_with_court = True
---
depends on:
  - x.county
generic object: ALAddress
id: county dropdown no court
question: |
  What county is ${x.on_one_line()} in?
subquestion: |
  We could not find the county for ${ x.on_one_line(bare=True) } in the list of Illinois counties, but you can select it here.

  ${ collapse_template(county_lookup_help) }
fields:
  - no label: x.county_dropdown
    code: |
      all_illinois_counties
---
depends on:
  - x.county
generic object: ALAddress
id: county dropdown with court
question: |
  What county is ${x.on_one_line()} in?
subquestion: |
  We could not find the county for ${ x.on_one_line(bare=True) } in the list of Illinois counties, but you can select it here.

  ${ collapse_template(county_lookup_help) }
fields:
  - no label: x.trial_court_index
    code: |
      court_county_lookup()
validation code: |
  if x.trial_court_index == "-1":
    trial_court = court_list.as_court('trial_court', 15)
  else:
    trial_court = court_list.as_court('trial_court', x.trial_court_index)
  x.county = trial_court.address.county + " County" 
---
code: |
  def court_county_lookup(lowercase=False):
    all_court_counties = court_list._load_courts()['address_county'].items()
    filtered_courts = [(-1, "cook")] if lowercase else [(-1, "Cook")]
    for court in all_court_counties:
      if court[1] != "Cook":
        court_name = court[1].lower() if lowercase else court[1]
        filtered_courts.append((court[0],court_name))
    return sorted( filtered_courts, key=lambda y: y[1])
---
template: county_lookup_help
subject: |
  **How do I look up the county?**
content: |  
  You can use this **[City-to-County Finder](https://www.statsamerica.org/CityCountyFinder/)** to find the county.
---
code: |
  def is_illinois_county(address_input):
    if address_input.state == "IL":
      return True
    else:    
      return False
---
code: |
  def county_in_list_with_court(input_county):
    county_name_storage = input_county.lower()
    if county_name_storage.endswith (" county"):
      county_name_storage = input_county.lower()[0:-7]
    county_found_storage = False
    for item in get_county_list():
      if county_name_storage == str(item).lower():
        county_found_storage = True
    if county_found_storage == True:
      return True
    else:
      return False
---
code: |
  def county_in_list_no_court(input_county):
    county_name_storage = input_county.lower()
    if county_name_storage.endswith (" county"):
      county_name_storage = input_county.lower()[0:-7]
    county_found_storage = False
    for item in all_illinois_counties:
      if county_name_storage == str(item).lower():
        county_found_storage = True
    if county_found_storage == True:
      return True
    else:
      return False
---
code: |
  def end_in_county(input_county):
    if input_county.endswith (" county"):
      return input_county
    else:
      return input_county + " County" 
---
code: |
  all_illinois_counties = ["Adams", "Alexander", "Bond", "Boone", "Brown", "Bureau", "Calhoun", "Carroll", "Cass", "Champaign", "Christian", "Clark", "Clay", "Clinton", "Coles", "Cook", "Crawford", "Cumberland", "DeKalb", "DeWitt", "Douglas", "DuPage", "Edgar", "Edwards", "Effingham", "Fayette", "Ford", "Franklin", "Fulton", "Gallatin", "Greene", "Grundy", "Hamilton", "Hancock", "Hardin", "Henderson", "Henry", "Iroquois", "Jackson", "Jasper", "Jefferson", "Jersey", "Jo Daviess", "Johnson", "Kane", "Kankakee", "Kendall", "Knox", "Lake", "LaSalle", "Lawrence", "Lee", "Livingston", "Logan", "Macon," "Macoupin", "Madison", "Marion", "Marshall", "Mason", "Massac", "McDonough", "McHenry", "McLean", "Menard", "Mercer", "Monroe", "Montgomery", "Morgan", "Moultrie", "Ogle", "Peoria", "Perry", "Piatt", "Pike", "Pope", "Pulaski", "Putnam", "Randolph", "Richland", "Rock Island", "Saline", "Sangamon", "Schuyler", "Scott", "Shelby", "St. Clair", "Stark", "Stephenson", "Tazewell", "Union", "Vermilion", "Wabash", "Warren", "Washington", "Wayne", "White", "Whiteside", "Will", "Williamson", "Winnebago", "Woodford"]
---
code: |
  def court_county_lookup(lowercase=False):
    all_court_counties = court_list._load_courts()['address_county'].items()
    filtered_courts = [(-1, "cook")] if lowercase else [(-1, "Cook")]
    for court in all_court_counties:
      if court[1] != "Cook":
        court_name = court[1].lower() if lowercase else court[1]
        filtered_courts.append((court[0],court_name))
    return sorted( filtered_courts, key=lambda y: y[1])
---
code: |
  def get_county_list(lowercase=False):
    county_list = [*set(court_list._load_courts()['address_county'])]
    county_list.sort()
    return county_list
---
---
id: get docs screen
event: get_docs_screen
question: |
  End Screen
subquestion: |
  Thank you for using ILAO Easy Forms!
  
  The address is ${test_person.address.on_one_line()}.
  
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }
---
  #The other address is ${another_person.address.on_one_line()}

---

id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - label: Edit
    fields:
      - test_person.address.address
      - recompute:
        - test_person.address.county_correct_no_court
    button: |
      **Call the address input page to set test_person.address.county:**
      ${test_person.address.county}
  - label: Edit
    fields:
      - another_person.address.address
      - recompute:
        - another_person.address.county_correct_no_court
    button: |
      **Call the address input page to set another_person.address.county:**
      ${another_person.address.county}